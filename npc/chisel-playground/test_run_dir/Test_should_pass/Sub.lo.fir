FIRRTL version 1.2.0
circuit Sub :
  module Sub : @[src/test/test.scala 7:7]
    input clock : Clock @[src/test/test.scala 7:7]
    input reset : UInt<1> @[src/test/test.scala 7:7]
    input io_a : UInt<4> @[src/test/test.scala 8:14]
    input io_b : UInt<4> @[src/test/test.scala 8:14]
    output io_c : UInt<4> @[src/test/test.scala 8:14]

    node _io_c_T = not(io_b) @[src/test/test.scala 13:18]
    node _io_c_T_1 = add(io_a, _io_c_T) @[src/test/test.scala 13:16]
    node _io_c_T_2 = tail(_io_c_T_1, 1) @[src/test/test.scala 13:16]
    node _io_c_T_3 = add(_io_c_T_2, UInt<1>("h1")) @[src/test/test.scala 13:24]
    node _io_c_T_4 = tail(_io_c_T_3, 1) @[src/test/test.scala 13:24]
    node _ref_T = sub(io_a, io_b) @[src/test/test.scala 15:18]
    node ref = tail(_ref_T, 1) @[src/test/test.scala 15:18]
    node _T = eq(io_c, ref) @[src/test/test.scala 16:15]
    node _T_1 = eq(reset, UInt<1>("h0")) @[src/test/test.scala 16:9]
    node _T_2 = eq(_T, UInt<1>("h0")) @[src/test/test.scala 16:9]
    io_c <= _io_c_T_4 @[src/test/test.scala 13:8]
    printf(clock, and(and(and(UInt<1>("h1"), _T_1), _T_2), UInt<1>("h1")), "Assertion failed\n    at test.scala:16 assert(io.c === ref)\n") : printf @[src/test/test.scala 16:9]
    assert(clock, _T, and(and(UInt<1>("h1"), _T_1), UInt<1>("h1")), "") : assert @[src/test/test.scala 16:9]
