$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 :! clock $end
  $var wire 1 ;! reset $end
  $var wire 1 <! clr $end
  $var wire 1 =! ps2_clk $end
  $var wire 1 >! ps2_data $end
  $var wire 8 ?! seg2n [7:0] $end
  $var wire 8 @! seg3n [7:0] $end
  $var wire 8 A! seg4n [7:0] $end
  $var wire 8 B! seg5n [7:0] $end
  $var wire 8 C! seg6n [7:0] $end
  $var wire 8 D! seg7n [7:0] $end
  $var wire 1 E! shift_pressing $end
  $var wire 1 F! ready $end
  $var wire 1 G! overflow $end
  $scope module TOP $end
   $var wire 1 :! clock $end
   $var wire 1 ;! reset $end
   $var wire 1 <! clr $end
   $var wire 1 =! ps2_clk $end
   $var wire 1 >! ps2_data $end
   $var wire 8 ?! seg2n [7:0] $end
   $var wire 8 @! seg3n [7:0] $end
   $var wire 8 A! seg4n [7:0] $end
   $var wire 8 B! seg5n [7:0] $end
   $var wire 8 C! seg6n [7:0] $end
   $var wire 8 D! seg7n [7:0] $end
   $var wire 1 E! shift_pressing $end
   $var wire 1 F! ready $end
   $var wire 1 G! overflow $end
   $var wire 8 ) data [7:0] $end
   $var wire 3 I! IDLE [2:0] $end
   $var wire 3 J! PRESS [2:0] $end
   $var wire 3 K! UP [2:0] $end
   $var wire 3 * shift_state [2:0] $end
   $var wire 3 + shift_next_state [2:0] $end
   $var wire 8 , counter [7:0] $end
   $var wire 8 - current_code [7:0] $end
   $var wire 8 . current_ascii [7:0] $end
   $var wire 3 / current_state [2:0] $end
   $var wire 3 0 next_state [2:0] $end
   $var wire 1 1 up $end
   $var wire 1 2 down $end
   $var wire 8 3 ascii [7:0] $end
   $var wire 1 4 shift $end
   $var wire 7 5 seg_codeHi [6:0] $end
   $var wire 7 6 seg_codeLo [6:0] $end
   $var wire 7 7 seg_asciiHi [6:0] $end
   $var wire 7 8 seg_asciiLo [6:0] $end
   $var wire 7 9 seg_numHi [6:0] $end
   $var wire 7 : seg_numLo [6:0] $end
   $scope module ShiftstateMux $end
    $var wire 32 L! NR_KEY [31:0] $end
    $var wire 32 L! KEY_LEN [31:0] $end
    $var wire 32 L! DATA_LEN [31:0] $end
    $var wire 3 + out [2:0] $end
    $var wire 3 * key [2:0] $end
    $var wire 3 I! default_out [2:0] $end
    $var wire 18 ; lut [17:0] $end
    $scope module i0 $end
     $var wire 32 L! NR_KEY [31:0] $end
     $var wire 32 L! KEY_LEN [31:0] $end
     $var wire 32 L! DATA_LEN [31:0] $end
     $var wire 32 M! HAS_DEFAULT [31:0] $end
     $var wire 3 + out [2:0] $end
     $var wire 3 * key [2:0] $end
     $var wire 3 I! default_out [2:0] $end
     $var wire 18 ; lut [17:0] $end
     $var wire 32 N! PAIR_LEN [31:0] $end
     $var wire 6 < pair_list[0] [5:0] $end
     $var wire 6 = pair_list[1] [5:0] $end
     $var wire 6 > pair_list[2] [5:0] $end
     $var wire 3 # key_list[0] [2:0] $end
     $var wire 3 $ key_list[1] [2:0] $end
     $var wire 3 % key_list[2] [2:0] $end
     $var wire 3 ? data_list[0] [2:0] $end
     $var wire 3 @ data_list[1] [2:0] $end
     $var wire 3 A data_list[2] [2:0] $end
     $var wire 3 B lut_out [2:0] $end
     $var wire 1 C hit $end
     $var wire 32 O! i [31:0] $end
    $upscope $end
   $upscope $end
   $scope module ascii_segHi $end
    $var wire 1 :! clock $end
    $var wire 1 ;! reset $end
    $var wire 4 D io_in [3:0] $end
    $var wire 7 7 io_out [6:0] $end
    $var wire 1 E outReg_0 $end
    $var wire 1 F outReg_1 $end
    $var wire 1 G outReg_2 $end
    $var wire 1 H outReg_3 $end
    $var wire 1 I outReg_4 $end
    $var wire 1 J outReg_5 $end
    $var wire 1 K outReg_6 $end
    $var wire 3 L io_out_lo [2:0] $end
    $var wire 4 M io_out_hi [3:0] $end
   $upscope $end
   $scope module ascii_segLo $end
    $var wire 1 :! clock $end
    $var wire 1 ;! reset $end
    $var wire 4 N io_in [3:0] $end
    $var wire 7 8 io_out [6:0] $end
    $var wire 1 O outReg_0 $end
    $var wire 1 P outReg_1 $end
    $var wire 1 Q outReg_2 $end
    $var wire 1 R outReg_3 $end
    $var wire 1 S outReg_4 $end
    $var wire 1 T outReg_5 $end
    $var wire 1 U outReg_6 $end
    $var wire 3 V io_out_lo [2:0] $end
    $var wire 4 W io_out_hi [3:0] $end
   $upscope $end
   $scope module code_segHi $end
    $var wire 1 :! clock $end
    $var wire 1 ;! reset $end
    $var wire 4 X io_in [3:0] $end
    $var wire 7 5 io_out [6:0] $end
    $var wire 1 Y outReg_0 $end
    $var wire 1 Z outReg_1 $end
    $var wire 1 [ outReg_2 $end
    $var wire 1 \ outReg_3 $end
    $var wire 1 ] outReg_4 $end
    $var wire 1 ^ outReg_5 $end
    $var wire 1 _ outReg_6 $end
    $var wire 3 ` io_out_lo [2:0] $end
    $var wire 4 a io_out_hi [3:0] $end
   $upscope $end
   $scope module code_segLo $end
    $var wire 1 :! clock $end
    $var wire 1 ;! reset $end
    $var wire 4 b io_in [3:0] $end
    $var wire 7 6 io_out [6:0] $end
    $var wire 1 c outReg_0 $end
    $var wire 1 d outReg_1 $end
    $var wire 1 e outReg_2 $end
    $var wire 1 f outReg_3 $end
    $var wire 1 g outReg_4 $end
    $var wire 1 h outReg_5 $end
    $var wire 1 i outReg_6 $end
    $var wire 3 j io_out_lo [2:0] $end
    $var wire 4 k io_out_hi [3:0] $end
   $upscope $end
   $scope module num_segHi $end
    $var wire 1 :! clock $end
    $var wire 1 ;! reset $end
    $var wire 4 l io_in [3:0] $end
    $var wire 7 9 io_out [6:0] $end
    $var wire 1 m outReg_0 $end
    $var wire 1 n outReg_1 $end
    $var wire 1 o outReg_2 $end
    $var wire 1 p outReg_3 $end
    $var wire 1 q outReg_4 $end
    $var wire 1 r outReg_5 $end
    $var wire 1 s outReg_6 $end
    $var wire 3 t io_out_lo [2:0] $end
    $var wire 4 u io_out_hi [3:0] $end
   $upscope $end
   $scope module num_segLo $end
    $var wire 1 :! clock $end
    $var wire 1 ;! reset $end
    $var wire 4 v io_in [3:0] $end
    $var wire 7 : io_out [6:0] $end
    $var wire 1 w outReg_0 $end
    $var wire 1 x outReg_1 $end
    $var wire 1 y outReg_2 $end
    $var wire 1 z outReg_3 $end
    $var wire 1 { outReg_4 $end
    $var wire 1 | outReg_5 $end
    $var wire 1 } outReg_6 $end
    $var wire 3 ~ io_out_lo [2:0] $end
    $var wire 4 !! io_out_hi [3:0] $end
   $upscope $end
   $scope module ps2 $end
    $var wire 1 :! clk $end
    $var wire 1 H! clrn $end
    $var wire 1 =! ps2_clk $end
    $var wire 1 >! ps2_data $end
    $var wire 1 P! nextdata_n $end
    $var wire 8 ) data [7:0] $end
    $var wire 1 F! ready $end
    $var wire 1 G! overflow $end
    $var wire 10 "! buffer [9:0] $end
    $var wire 8 #! fifo[0] [7:0] $end
    $var wire 8 $! fifo[1] [7:0] $end
    $var wire 8 %! fifo[2] [7:0] $end
    $var wire 8 &! fifo[3] [7:0] $end
    $var wire 8 '! fifo[4] [7:0] $end
    $var wire 8 (! fifo[5] [7:0] $end
    $var wire 8 )! fifo[6] [7:0] $end
    $var wire 8 *! fifo[7] [7:0] $end
    $var wire 3 +! w_ptr [2:0] $end
    $var wire 3 ,! r_ptr [2:0] $end
    $var wire 4 -! count [3:0] $end
    $var wire 3 .! ps2_clk_sync [2:0] $end
    $var wire 1 /! sampling $end
   $upscope $end
   $scope module stateMux $end
    $var wire 32 L! NR_KEY [31:0] $end
    $var wire 32 L! KEY_LEN [31:0] $end
    $var wire 32 L! DATA_LEN [31:0] $end
    $var wire 3 0 out [2:0] $end
    $var wire 3 / key [2:0] $end
    $var wire 3 I! default_out [2:0] $end
    $var wire 18 0! lut [17:0] $end
    $scope module i0 $end
     $var wire 32 L! NR_KEY [31:0] $end
     $var wire 32 L! KEY_LEN [31:0] $end
     $var wire 32 L! DATA_LEN [31:0] $end
     $var wire 32 M! HAS_DEFAULT [31:0] $end
     $var wire 3 0 out [2:0] $end
     $var wire 3 / key [2:0] $end
     $var wire 3 I! default_out [2:0] $end
     $var wire 18 0! lut [17:0] $end
     $var wire 32 N! PAIR_LEN [31:0] $end
     $var wire 6 1! pair_list[0] [5:0] $end
     $var wire 6 2! pair_list[1] [5:0] $end
     $var wire 6 3! pair_list[2] [5:0] $end
     $var wire 3 & key_list[0] [2:0] $end
     $var wire 3 ' key_list[1] [2:0] $end
     $var wire 3 ( key_list[2] [2:0] $end
     $var wire 3 4! data_list[0] [2:0] $end
     $var wire 3 5! data_list[1] [2:0] $end
     $var wire 3 6! data_list[2] [2:0] $end
     $var wire 3 7! lut_out [2:0] $end
     $var wire 1 8! hit $end
     $var wire 32 O! i [31:0] $end
    $upscope $end
   $upscope $end
   $scope module trans $end
    $var wire 1 :! clock $end
    $var wire 1 ;! reset $end
    $var wire 1 9! shift $end
    $var wire 8 ) code [7:0] $end
    $var wire 8 3 ascii [7:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


