$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 *! clock $end
  $var wire 1 +! reset $end
  $var wire 1 ,! clr $end
  $var wire 1 -! ps2_clk $end
  $var wire 1 .! ps2_data $end
  $var wire 8 /! seg2n [7:0] $end
  $var wire 8 0! seg3n [7:0] $end
  $var wire 8 1! seg4n [7:0] $end
  $var wire 8 2! seg5n [7:0] $end
  $var wire 8 3! seg6n [7:0] $end
  $var wire 8 4! seg7n [7:0] $end
  $var wire 1 5! ready $end
  $var wire 1 6! overflow $end
  $scope module TOP $end
   $var wire 1 *! clock $end
   $var wire 1 +! reset $end
   $var wire 1 ,! clr $end
   $var wire 1 -! ps2_clk $end
   $var wire 1 .! ps2_data $end
   $var wire 8 /! seg2n [7:0] $end
   $var wire 8 0! seg3n [7:0] $end
   $var wire 8 1! seg4n [7:0] $end
   $var wire 8 2! seg5n [7:0] $end
   $var wire 8 3! seg6n [7:0] $end
   $var wire 8 4! seg7n [7:0] $end
   $var wire 1 5! ready $end
   $var wire 1 6! overflow $end
   $var wire 8 & data [7:0] $end
   $var wire 3 8! IDLE [2:0] $end
   $var wire 3 9! PRESS [2:0] $end
   $var wire 3 :! UP [2:0] $end
   $var wire 8 ' counter [7:0] $end
   $var wire 8 ( current_code [7:0] $end
   $var wire 8 ) current_ascii [7:0] $end
   $var wire 3 * current_state [2:0] $end
   $var wire 3 + next_state [2:0] $end
   $var wire 1 , up $end
   $var wire 1 - down $end
   $var wire 8 . ascii [7:0] $end
   $var wire 7 / seg_codeHi [6:0] $end
   $var wire 7 0 seg_codeLo [6:0] $end
   $var wire 7 1 seg_asciiHi [6:0] $end
   $var wire 7 2 seg_asciiLo [6:0] $end
   $var wire 7 3 seg_numHi [6:0] $end
   $var wire 7 4 seg_numLo [6:0] $end
   $scope module ascii_segHi $end
    $var wire 1 *! clock $end
    $var wire 1 +! reset $end
    $var wire 4 5 io_in [3:0] $end
    $var wire 7 1 io_out [6:0] $end
    $var wire 1 6 outReg_0 $end
    $var wire 1 7 outReg_1 $end
    $var wire 1 8 outReg_2 $end
    $var wire 1 9 outReg_3 $end
    $var wire 1 : outReg_4 $end
    $var wire 1 ; outReg_5 $end
    $var wire 1 < outReg_6 $end
    $var wire 3 = io_out_lo [2:0] $end
    $var wire 4 > io_out_hi [3:0] $end
   $upscope $end
   $scope module ascii_segLo $end
    $var wire 1 *! clock $end
    $var wire 1 +! reset $end
    $var wire 4 ? io_in [3:0] $end
    $var wire 7 2 io_out [6:0] $end
    $var wire 1 @ outReg_0 $end
    $var wire 1 A outReg_1 $end
    $var wire 1 B outReg_2 $end
    $var wire 1 C outReg_3 $end
    $var wire 1 D outReg_4 $end
    $var wire 1 E outReg_5 $end
    $var wire 1 F outReg_6 $end
    $var wire 3 G io_out_lo [2:0] $end
    $var wire 4 H io_out_hi [3:0] $end
   $upscope $end
   $scope module code_segHi $end
    $var wire 1 *! clock $end
    $var wire 1 +! reset $end
    $var wire 4 I io_in [3:0] $end
    $var wire 7 / io_out [6:0] $end
    $var wire 1 J outReg_0 $end
    $var wire 1 K outReg_1 $end
    $var wire 1 L outReg_2 $end
    $var wire 1 M outReg_3 $end
    $var wire 1 N outReg_4 $end
    $var wire 1 O outReg_5 $end
    $var wire 1 P outReg_6 $end
    $var wire 3 Q io_out_lo [2:0] $end
    $var wire 4 R io_out_hi [3:0] $end
   $upscope $end
   $scope module code_segLo $end
    $var wire 1 *! clock $end
    $var wire 1 +! reset $end
    $var wire 4 S io_in [3:0] $end
    $var wire 7 0 io_out [6:0] $end
    $var wire 1 T outReg_0 $end
    $var wire 1 U outReg_1 $end
    $var wire 1 V outReg_2 $end
    $var wire 1 W outReg_3 $end
    $var wire 1 X outReg_4 $end
    $var wire 1 Y outReg_5 $end
    $var wire 1 Z outReg_6 $end
    $var wire 3 [ io_out_lo [2:0] $end
    $var wire 4 \ io_out_hi [3:0] $end
   $upscope $end
   $scope module num_segHi $end
    $var wire 1 *! clock $end
    $var wire 1 +! reset $end
    $var wire 4 ] io_in [3:0] $end
    $var wire 7 3 io_out [6:0] $end
    $var wire 1 ^ outReg_0 $end
    $var wire 1 _ outReg_1 $end
    $var wire 1 ` outReg_2 $end
    $var wire 1 a outReg_3 $end
    $var wire 1 b outReg_4 $end
    $var wire 1 c outReg_5 $end
    $var wire 1 d outReg_6 $end
    $var wire 3 e io_out_lo [2:0] $end
    $var wire 4 f io_out_hi [3:0] $end
   $upscope $end
   $scope module num_segLo $end
    $var wire 1 *! clock $end
    $var wire 1 +! reset $end
    $var wire 4 g io_in [3:0] $end
    $var wire 7 4 io_out [6:0] $end
    $var wire 1 h outReg_0 $end
    $var wire 1 i outReg_1 $end
    $var wire 1 j outReg_2 $end
    $var wire 1 k outReg_3 $end
    $var wire 1 l outReg_4 $end
    $var wire 1 m outReg_5 $end
    $var wire 1 n outReg_6 $end
    $var wire 3 o io_out_lo [2:0] $end
    $var wire 4 p io_out_hi [3:0] $end
   $upscope $end
   $scope module ps2 $end
    $var wire 1 *! clk $end
    $var wire 1 7! clrn $end
    $var wire 1 -! ps2_clk $end
    $var wire 1 .! ps2_data $end
    $var wire 1 ;! nextdata_n $end
    $var wire 8 & data [7:0] $end
    $var wire 1 5! ready $end
    $var wire 1 6! overflow $end
    $var wire 10 q buffer [9:0] $end
    $var wire 8 r fifo[0] [7:0] $end
    $var wire 8 s fifo[1] [7:0] $end
    $var wire 8 t fifo[2] [7:0] $end
    $var wire 8 u fifo[3] [7:0] $end
    $var wire 8 v fifo[4] [7:0] $end
    $var wire 8 w fifo[5] [7:0] $end
    $var wire 8 x fifo[6] [7:0] $end
    $var wire 8 y fifo[7] [7:0] $end
    $var wire 3 z w_ptr [2:0] $end
    $var wire 3 { r_ptr [2:0] $end
    $var wire 4 | count [3:0] $end
    $var wire 3 } ps2_clk_sync [2:0] $end
    $var wire 1 ~ sampling $end
   $upscope $end
   $scope module stateMux $end
    $var wire 32 <! NR_KEY [31:0] $end
    $var wire 32 <! KEY_LEN [31:0] $end
    $var wire 32 <! DATA_LEN [31:0] $end
    $var wire 3 + out [2:0] $end
    $var wire 3 * key [2:0] $end
    $var wire 3 8! default_out [2:0] $end
    $var wire 18 !! lut [17:0] $end
    $scope module i0 $end
     $var wire 32 <! NR_KEY [31:0] $end
     $var wire 32 <! KEY_LEN [31:0] $end
     $var wire 32 <! DATA_LEN [31:0] $end
     $var wire 32 =! HAS_DEFAULT [31:0] $end
     $var wire 3 + out [2:0] $end
     $var wire 3 * key [2:0] $end
     $var wire 3 8! default_out [2:0] $end
     $var wire 18 !! lut [17:0] $end
     $var wire 32 >! PAIR_LEN [31:0] $end
     $var wire 6 "! pair_list[0] [5:0] $end
     $var wire 6 #! pair_list[1] [5:0] $end
     $var wire 6 $! pair_list[2] [5:0] $end
     $var wire 3 # key_list[0] [2:0] $end
     $var wire 3 $ key_list[1] [2:0] $end
     $var wire 3 % key_list[2] [2:0] $end
     $var wire 3 %! data_list[0] [2:0] $end
     $var wire 3 &! data_list[1] [2:0] $end
     $var wire 3 '! data_list[2] [2:0] $end
     $var wire 3 (! lut_out [2:0] $end
     $var wire 1 )! hit $end
     $var wire 32 ?! i [31:0] $end
    $upscope $end
   $upscope $end
   $scope module trans $end
    $var wire 1 *! clock $end
    $var wire 1 +! reset $end
    $var wire 8 & code [7:0] $end
    $var wire 8 . ascii [7:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


